apiVersion: apps/v1
kind: Deployment
metadata:
  name: games
spec:
  selector:
    matchLabels:
      app: games
  template:
    metadata:
      labels:
        app: games
    spec:
      containers:
      - env:
        - name: NATS_HOST
          value: my-nats
        - name: REDIS_HOST
          value: games-redis-master
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redis-password
              name: games-redis
        - name: WORDS_ADDRESS
          value: words:50051
        image: ghcr.io/deesejohn/games:1a39f43@sha256:4073acc169db9da5e213cb3c5d8789cd7866d33b072f4303f253174507228502
        livenessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:50051
          initialDelaySeconds: 10
        name: server
        ports:
        - containerPort: 50051
        readinessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:50051
          initialDelaySeconds: 5
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 50Mi
---
apiVersion: v1
kind: Service
metadata:
  name: games
spec:
  ports:
  - name: grpc
    port: 50051
    targetPort: 50051
  selector:
    app: games
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: games-bff
spec:
  selector:
    matchLabels:
      app: games-bff
  template:
    metadata:
      labels:
        app: games-bff
    spec:
      containers:
      - env:
        - name: GAMES_HOST
          value: games:50051
        - name: HOST_PREFIX
          value: /api/games
        - name: NATS_HOST
          value: my-nats
        image: ghcr.io/deesejohn/games-bff:1a39f43@sha256:9ead1be64650fb462957e4cf9e2a27b46d009eba6f6e3fe511099ec0655ad0ad
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8000
          initialDelaySeconds: 5
        name: server
        ports:
        - containerPort: 8000
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8000
          initialDelaySeconds: 10
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 50Mi
---
apiVersion: v1
kind: Service
metadata:
  name: games-bff
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8000
  selector:
    app: games-bff
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
  name: games-bff-ingress
spec:
  rules:
  - http:
      paths:
      - backend:
          service:
            name: games-bff
            port:
              number: 80
        path: /api/games(/|$)(.*)
        pathType: Prefix

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: games-spa
spec:
  selector:
    matchLabels:
      app: games-spa
  template:
    metadata:
      labels:
        app: games-spa
    spec:
      containers:
      - image: ghcr.io/deesejohn/games-spa:1a39f43@sha256:f12e477dfe88fc3b6d4de1324154a0ba5146ce04f94f242e54ea492654378150
        name: server
        ports:
        - containerPort: 80
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 50Mi
---
apiVersion: v1
kind: Service
metadata:
  name: games-spa
spec:
  ports:
  - name: http
    port: 80
    targetPort: 80
  selector:
    app: games-spa
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$2
  name: games-spa-ingress
spec:
  rules:
  - http:
      paths:
      - backend:
          service:
            name: games-spa
            port:
              number: 80
        path: /games(/|$)(.*)
        pathType: Prefix

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lobbies
spec:
  selector:
    matchLabels:
      app: lobbies
  template:
    metadata:
      labels:
        app: lobbies
    spec:
      containers:
      - env:
        - name: ASPNETCORE_FORWARDEDHEADERS_ENABLED
          value: "true"
        - name: GAMES_HOST
          value: http://games:50051
        - name: HOST_PREFIX
          value: /api/lobbies
        - name: PLAYERS_HOST
          value: http://players
        - name: REDIS_HOST
          value: lobbies-redis-master
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redis-password
              name: lobbies-redis
        image: ghcr.io/deesejohn/lobbies:1a39f43@sha256:d5801b1ddc5478906b665ffdc4cba479188e33b121b6578157f379ba62b1f169
        livenessProbe:
          httpGet:
            path: /health/live
            port: 80
          initialDelaySeconds: 5
        name: server
        ports:
        - containerPort: 80
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 80
          initialDelaySeconds: 10
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 50Mi
---
apiVersion: v1
kind: Service
metadata:
  name: lobbies
spec:
  ports:
  - name: http
    port: 80
    targetPort: 80
  selector:
    app: lobbies
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
  name: lobbies-ingress
spec:
  rules:
  - http:
      paths:
      - backend:
          service:
            name: lobbies
            port:
              number: 80
        path: /api/lobbies(/|$)(.*)
        pathType: Prefix

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lobbies-spa
spec:
  selector:
    matchLabels:
      app: lobbies-spa
  template:
    metadata:
      labels:
        app: lobbies-spa
    spec:
      containers:
      - image: ghcr.io/deesejohn/lobbies-spa:1a39f43@sha256:f588f301f554da26f705e3865bc2c7c1c40547ee2b4e816cb4804628d8087cca
        name: server
        ports:
        - containerPort: 80
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 50Mi
---
apiVersion: v1
kind: Service
metadata:
  name: lobbies-spa
spec:
  ports:
  - name: http
    port: 80
    targetPort: 80
  selector:
    app: lobbies-spa
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$2
  name: lobbies-spa-ingress
spec:
  rules:
  - http:
      paths:
      - backend:
          service:
            name: lobbies-spa
            port:
              number: 80
        path: /lobbies(/|$)(.*)
        pathType: Prefix

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: players
spec:
  selector:
    matchLabels:
      app: players
  template:
    metadata:
      labels:
        app: players
    spec:
      containers:
      - env:
        - name: HOST_PREFIX
          value: /api/players
        - name: REDIS_HOST
          value: players-redis-master
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redis-password
              name: players-redis
        image: ghcr.io/deesejohn/players:1a39f43@sha256:bc7862a6197ffeecfb834cd106c01fe9bf1c095a330a65b2d31b340e926ea002
        livenessProbe:
          httpGet:
            path: /health/live
            port: 80
          initialDelaySeconds: 5
        name: server
        ports:
        - containerPort: 80
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 80
          initialDelaySeconds: 10
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 50Mi
---
apiVersion: v1
kind: Service
metadata:
  name: players
spec:
  ports:
  - name: http
    port: 80
    targetPort: 80
  selector:
    app: players
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$2
  name: players-ingress
spec:
  rules:
  - http:
      paths:
      - backend:
          service:
            name: players
            port:
              number: 80
        path: /api/players(/|$)(.*)
        pathType: Prefix

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: players-spa
spec:
  selector:
    matchLabels:
      app: players-spa
  template:
    metadata:
      labels:
        app: players-spa
    spec:
      containers:
      - image: ghcr.io/deesejohn/players-spa:1a39f43@sha256:20c7ff74394ac6db2c2c05faffcbe9cc236f5cd5eb26c6ce54a3eaaa4fc7fcbc
        name: server
        ports:
        - containerPort: 80
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 50Mi
---
apiVersion: v1
kind: Service
metadata:
  name: players-spa
spec:
  ports:
  - name: http
    port: 80
    targetPort: 80
  selector:
    app: players-spa
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$2
  name: players-spa-ingress
spec:
  rules:
  - http:
      paths:
      - backend:
          service:
            name: players-spa
            port:
              number: 80
        path: /players(/|$)(.*)
        pathType: Prefix

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: words
spec:
  selector:
    matchLabels:
      app: words
  template:
    metadata:
      labels:
        app: words
    spec:
      containers:
      - image: ghcr.io/deesejohn/words:1a39f43@sha256:ead23caf4b67142c62cb4d25cd3ca6a5add27bf0207cd14c8d5c52ba46aaefb5
        livenessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:50051
          initialDelaySeconds: 10
        name: server
        ports:
        - containerPort: 50051
        readinessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:50051
          initialDelaySeconds: 5
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 50Mi
---
apiVersion: v1
kind: Service
metadata:
  name: words
spec:
  ports:
  - name: grpc
    port: 50051
    targetPort: 50051
  selector:
    app: words
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/configuration-snippet: |
      return 301 /lobbies;
  name: default-ingress
spec:
  rules:
  - http:
      paths:
      - backend:
          service:
            name: default-backend
            port:
              number: 80
        path: /
        pathType: Prefix
